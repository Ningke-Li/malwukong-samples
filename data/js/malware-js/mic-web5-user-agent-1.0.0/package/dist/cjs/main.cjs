var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b ||= {})
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var __forAwait = (obj, it, method) => {
  it = obj[Symbol.asyncIterator];
  method = (key, fn) => (fn = obj[key]) && (it[key] = (arg) => new Promise((resolve, reject, done) => {
    arg = fn.call(obj, arg);
    done = arg.done;
    return Promise.resolve(arg.value).then((value) => resolve({ value, done }), reject);
  }));
  return it ? it.call(obj) : (obj = obj[Symbol.iterator](), it = {}, method("next"), method("return"), it);
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  ProfileApi: () => ProfileApi,
  ProfileStore: () => ProfileStore,
  Web5UserAgent: () => Web5UserAgent
});
module.exports = __toCommonJS(main_exports);

// src/profile-store.ts
var import_level2 = require("level");

// src/profile-index.ts
var import_level = require("level");
var import_flat = __toESM(require("flat"), 1);
var { flatten } = import_flat.default;
var ProfileIndex = class {
  constructor(location = "data/agent/profiles-index") {
    this.location = location;
    this.level = new import_level.Level(location);
  }
  delete(id) {
    return __async(this, null, function* () {
      const ops = [];
      let keyPrefixes = yield this.level.get(`__${id}__meta`);
      if (!keyPrefixes) {
        return;
      }
      keyPrefixes = keyPrefixes.split("@");
      for (let keyPrefix of keyPrefixes) {
        const op = { type: "del", key: `${keyPrefix}~${id}` };
        ops.push(op);
      }
      ops.push({ type: "del", key: `__${id}__meta` });
      yield this.level.batch(ops);
    });
  }
  put(record) {
    return __async(this, null, function* () {
      const flattenedRecord = flatten(record);
      let { id } = flattenedRecord;
      let keyPrefixes = [];
      const ops = [];
      for (let property in flattenedRecord) {
        if (property === "id") {
          continue;
        }
        const propVal = flattenedRecord[property];
        const keyPrefix = `${property}~${propVal}`;
        const key = `${keyPrefix}~${id}`;
        ops.push({ type: "put", key, value: id });
        keyPrefixes.push(keyPrefix);
      }
      ops.push({ type: "put", key: `__${id}__meta`, value: keyPrefixes.join("@") });
      yield this.level.batch(ops);
    });
  }
  query(filter) {
    return __async(this, null, function* () {
      const matches = {};
      const promises = [];
      for (let propertyName in filter) {
        const propertyValue = filter[propertyName];
        if (typeof propertyValue === "object" && propertyValue !== null) {
          if (Array.isArray(propertyValue)) {
            for (let value of propertyValue) {
              const promise = this.buildTermQuery(propertyName, value, matches);
              promises.push(promise);
            }
          } else {
            const promise = this.buildRangeQuery(propertyName, propertyValue, matches);
            promises.push(promise);
          }
        } else {
          const promise = this.buildTermQuery(propertyName, propertyValue, matches);
          promises.push(promise);
        }
      }
      const numFilters = Object.keys(filter).length;
      const docIds = [];
      yield Promise.all(promises);
      for (let docId in matches) {
        if (matches[docId] === numFilters) {
          docIds.push(docId);
        }
      }
      return docIds;
    });
  }
  buildTermQuery(propertyName, propertyValue, matches) {
    return __async(this, null, function* () {
      const key = `${propertyName}~${propertyValue}`;
      const iteratorOptions = {
        gt: `${key}~`
      };
      try {
        for (var iter = __forAwait(this.level.iterator(iteratorOptions)), more, temp, error; more = !(temp = yield iter.next()).done; more = false) {
          let doc = temp.value;
          const [k, val] = doc;
          if (!k.includes(key)) {
            break;
          }
          if (val in matches) {
            matches[val] += 1;
          } else {
            matches[val] = 1;
          }
        }
      } catch (temp) {
        error = [temp];
      } finally {
        try {
          more && (temp = iter.return) && (yield temp.call(iter));
        } finally {
          if (error)
            throw error[0];
        }
      }
    });
  }
  buildRangeQuery(propertyName, range, matches) {
    return __async(this, null, function* () {
      const key = `${propertyName}`;
      const iteratorOptions = {};
      for (let inequality in range) {
        iteratorOptions[inequality] = `${propertyName}~${range[inequality]}`;
      }
      try {
        for (var iter = __forAwait(this.level.iterator(iteratorOptions)), more, temp, error; more = !(temp = yield iter.next()).done; more = false) {
          let doc = temp.value;
          const [k, val] = doc;
          if (!k.includes(key)) {
            break;
          }
          if (val in matches) {
            matches[val] += 1;
          } else {
            matches[val] = 1;
          }
        }
      } catch (temp) {
        error = [temp];
      } finally {
        try {
          more && (temp = iter.return) && (yield temp.call(iter));
        } finally {
          if (error)
            throw error[0];
        }
      }
    });
  }
  clear() {
    return __async(this, null, function* () {
      this.level.clear();
    });
  }
  close() {
    return __async(this, null, function* () {
      return this.level.close();
    });
  }
};

// src/profile-store.ts
var _ProfileStore = class {
  constructor(options = {}) {
    options = __spreadValues(__spreadValues({}, _ProfileStore._defaultOptions), options);
    this.db = new import_level2.Level(options.location);
    this.index = new ProfileIndex(options.indexLocation);
  }
  put(entry) {
    return __async(this, null, function* () {
      const key = this.generateKey(entry.id);
      const value = JSON.stringify(entry);
      yield this.db.put(key, value);
      yield this.index.put(entry);
    });
  }
  get(id) {
    return __async(this, null, function* () {
      const key = this.generateKey(id);
      try {
        const value = yield this.db.get(key);
        return JSON.parse(value);
      } catch (e) {
        if (e.code === "LEVEL_NOT_FOUND") {
          return void 0;
        }
      }
    });
  }
  query(filter) {
    return __async(this, null, function* () {
      const results = yield this.index.query(filter);
      const profiles = [];
      const serializedProfiles = yield this.db.getMany(results);
      for (let serializedProfile of serializedProfiles) {
        profiles.push(JSON.parse(serializedProfile));
      }
      return profiles;
    });
  }
  all() {
    return __async(this, null, function* () {
      const serializedProfiles = yield this.db.values().all();
      const profiles = [];
      for (let serializedProfile of serializedProfiles) {
        profiles.push(JSON.parse(serializedProfile));
      }
      return profiles;
    });
  }
  delete() {
    return __async(this, null, function* () {
      throw new Error("Method not implemented.");
    });
  }
  clear() {
    return __async(this, null, function* () {
      yield this.index.clear();
      yield this.db.clear();
      return;
    });
  }
  close() {
    return __async(this, null, function* () {
      yield this.index.close();
      yield this.db.close();
      return;
    });
  }
  generateKey(id) {
    return `PROFILE_${id}`;
  }
};
var ProfileStore = _ProfileStore;
ProfileStore._defaultOptions = {
  location: "data/agent/profiles",
  indexLocation: "data/agent/profiles-index"
};

// src/profile-api.ts
var ProfileApi = class {
  constructor(store) {
    this.store = store || (store = new ProfileStore());
  }
  createProfile(options) {
    return __async(this, null, function* () {
      var _a;
      if (!options.did && !options.didMethod) {
        throw new Error("must provide did or didMethod");
      }
      const profile = {
        name: options.name,
        icon: options.icon,
        dateCreated: new Date()
      };
      if (options.did) {
        profile.did = options.did;
      } else {
      }
      profile.id = (_a = options.did) == null ? void 0 : _a.id;
      yield this.store.put(profile);
      return profile;
    });
  }
  getProfile(id) {
    return this.store.get(id);
  }
  // TODO: discuss whether we want to rename this to getProfiles instead
  listProfiles() {
    return this.store.all();
  }
};

// src/web5-user-agent.ts
var import_dwn_sdk_js = require("@tbd54566975/dwn-sdk-js");
var dwnMessageCreators = {
  [import_dwn_sdk_js.DwnInterfaceName.Events + import_dwn_sdk_js.DwnMethodName.Get]: import_dwn_sdk_js.EventsGet,
  [import_dwn_sdk_js.DwnInterfaceName.Messages + import_dwn_sdk_js.DwnMethodName.Get]: import_dwn_sdk_js.MessagesGet,
  [import_dwn_sdk_js.DwnInterfaceName.Records + import_dwn_sdk_js.DwnMethodName.Read]: import_dwn_sdk_js.RecordsRead,
  [import_dwn_sdk_js.DwnInterfaceName.Records + import_dwn_sdk_js.DwnMethodName.Query]: import_dwn_sdk_js.RecordsQuery,
  [import_dwn_sdk_js.DwnInterfaceName.Records + import_dwn_sdk_js.DwnMethodName.Write]: import_dwn_sdk_js.RecordsWrite,
  [import_dwn_sdk_js.DwnInterfaceName.Records + import_dwn_sdk_js.DwnMethodName.Delete]: import_dwn_sdk_js.RecordsDelete,
  [import_dwn_sdk_js.DwnInterfaceName.Protocols + import_dwn_sdk_js.DwnMethodName.Query]: import_dwn_sdk_js.ProtocolsQuery,
  [import_dwn_sdk_js.DwnInterfaceName.Protocols + import_dwn_sdk_js.DwnMethodName.Configure]: import_dwn_sdk_js.ProtocolsConfigure
};
var Web5UserAgent = class {
  constructor(options) {
    this.dwn = options.dwn;
    this.profileManager = options.profileManager;
  }
  static create(options) {
    return __async(this, null, function* () {
      options.dwn || (options.dwn = yield import_dwn_sdk_js.Dwn.create());
      options.profileManager || (options.profileManager = new ProfileApi());
      return new Web5UserAgent(options);
    });
  }
  processDwnRequest(message) {
    return __async(this, null, function* () {
      const profile = yield this.profileManager.getProfile(message.author);
      if (!profile) {
        throw new Error("profile not found for author.");
      }
      const { keys } = profile.did;
      const [key] = keys;
      const { privateKeyJwk } = key;
      const kidFragment = privateKeyJwk.kid || key.id;
      const kid = `${profile.did.id}#${kidFragment}`;
      const dwnSignatureInput = {
        privateJwk: privateKeyJwk,
        protectedHeader: { alg: privateKeyJwk.crv, kid }
      };
      const messageCreateInput = __spreadProps(__spreadValues({}, message.messageOptions), {
        authorizationSignatureInput: dwnSignatureInput
      });
      const messageCreator = dwnMessageCreators[message.messageType];
      const dwnMessage = yield messageCreator.create(messageCreateInput);
      const reply = yield this.dwn.processMessage(message.target, dwnMessage.toJSON(), message.dataStream);
      return {
        reply,
        message: dwnMessage.toJSON()
      };
    });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ProfileApi,
  ProfileStore,
  Web5UserAgent
});
//# sourceMappingURL=main.cjs.map

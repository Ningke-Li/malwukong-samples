{
  "version": 3,
  "sources": ["../../src/main.ts", "../../src/profile-store.ts", "../../src/profile-index.ts", "../../src/profile-api.ts", "../../src/web5-user-agent.ts"],
  "sourcesContent": ["export * from './web5-user-agent.js';\nexport * from './profile-manager.js';\nexport * from './profile-api.js';\nexport * from './profile-store.js';", "import type { Filter, QueryStore } from '@tbd54566975/web5-agent';\nimport type { Profile } from './profile-manager.js';\n\nimport { Level } from 'level';\n\nimport { ProfileIndex } from './profile-index.js';\n// TODO: refactor to use another underlying datastore\n\nexport type ProfileStoreOptions = {\n  location?: string;\n  indexLocation?: string;\n};\nexport class ProfileStore implements QueryStore<Profile> {\n  private db: Level;\n  private index: ProfileIndex;\n\n  private static _defaultOptions = {\n    location      : 'data/agent/profiles',\n    indexLocation : 'data/agent/profiles-index'\n  };\n\n  constructor(options: ProfileStoreOptions = {}) {\n    options = { ...ProfileStore._defaultOptions, ...options };\n\n    this.db = new Level(options.location);\n    this.index = new ProfileIndex(options.indexLocation);\n  }\n\n  async put(entry: Profile): Promise<void> {\n    const key = this.generateKey(entry.id);\n    const value = JSON.stringify(entry);\n\n    await this.db.put(key, value);\n    await this.index.put(entry);\n  }\n\n  async get(id: string): Promise<Profile | undefined> {\n    const key = this.generateKey(id);\n\n    try {\n      const value = await this.db.get(key);\n\n      return JSON.parse(value);\n    } catch(e: any) {\n      if (e.code === 'LEVEL_NOT_FOUND') {\n        return undefined;\n      }\n    }\n  }\n\n  async query(filter: Filter): Promise<Profile[]> {\n    const results = await this.index.query(filter);\n    const profiles = [];\n\n    const serializedProfiles = await this.db.getMany(results);\n    for (let serializedProfile of serializedProfiles) {\n      profiles.push(JSON.parse(serializedProfile));\n    }\n\n    return profiles;\n  }\n\n  async all(): Promise<Profile[]> {\n    const serializedProfiles = await this.db.values().all();\n    const profiles = [];\n\n    for (let serializedProfile of serializedProfiles) {\n      profiles.push(JSON.parse(serializedProfile));\n    }\n\n    return profiles;\n  }\n\n  async delete(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  async clear(): Promise<void> {\n    await this.index.clear();\n    await this.db.clear();\n\n    return;\n  }\n\n  async close(): Promise<void> {\n    await this.index.close();\n    await this.db.close();\n\n    return;\n  }\n\n  private generateKey(id: string) {\n    return `PROFILE_${id}`;\n  }\n\n}", "import type { AbstractBatchOperation, AbstractBatchDelOperation } from 'abstract-level';\n\nimport { Level } from 'level';\nimport flat from 'flat';\n\nconst { flatten } = flat;\n\nexport type Record = {\n  id: string,\n  [prop: string]: unknown\n};\n\nexport type RangeFilter = {\n  gt?: any,\n  gte?: any,\n  lt?: any,\n  lte?: any\n};\n\nexport type TermFilter = string | number | boolean\n\nexport type Filter = {\n  [prop: string]: TermFilter | TermFilter[] | RangeFilter\n}\n\nexport class ProfileIndex {\n  level: Level<string, string>;\n\n  constructor(private location = 'data/agent/profiles-index') {\n    this.level = new Level(location);\n  }\n\n  async delete(id: string): Promise<void> {\n    const ops: AbstractBatchDelOperation<typeof this.level, string>[] = [];\n\n    let keyPrefixes: string | string[] = await this.level.get(`__${id}__meta`);\n    if (!keyPrefixes) {\n      return;\n    }\n\n    keyPrefixes = keyPrefixes.split('@');\n\n    for (let keyPrefix of keyPrefixes) {\n      const op = { type: 'del' as const, key: `${keyPrefix}~${id}` };\n      ops.push(op);\n    }\n\n    ops.push({ type: 'del' as const, key: `__${id}__meta` });\n\n    await this.level.batch(ops);\n  }\n\n  async put(record: Record): Promise<void> {\n    const flattenedRecord: Record = flatten(record);\n    let { id } = flattenedRecord;\n\n    let keyPrefixes: string[] = [];\n    const ops: AbstractBatchOperation<typeof this.level, string, string>[] = [];\n    for (let property in flattenedRecord) {\n      if (property === 'id') {\n        continue;\n      }\n\n      const propVal = flattenedRecord[property];\n      const keyPrefix = `${property}~${propVal}`;\n      const key = `${keyPrefix}~${id}`;\n\n      ops.push({ type: 'put', key, value: id });\n      keyPrefixes.push(keyPrefix);\n    }\n\n    ops.push({ type: 'put', key: `__${id}__meta`, value: keyPrefixes.join('@')  });\n\n    await this.level.batch(ops);\n  }\n\n  async query(filter: Filter): Promise<Array<string>> {\n    const matches: { [docId: string]: number } = {};\n    const promises: Promise<void>[] = [];\n\n    for (let propertyName in filter) {\n      const propertyValue = filter[propertyName];\n\n      if (typeof propertyValue === 'object' && propertyValue !== null) {\n        if (Array.isArray(propertyValue)) {\n          // OR query\n          for (let value of propertyValue) {\n            const promise = this.buildTermQuery(propertyName, value, matches);\n            promises.push(promise);\n          }\n        } else {\n          const promise = this.buildRangeQuery(propertyName, propertyValue, matches);\n          promises.push(promise);\n        }\n      } else {\n        const promise = this.buildTermQuery(propertyName, propertyValue, matches);\n        promises.push(promise);\n      }\n    }\n\n    const numFilters = Object.keys(filter).length;\n    const docIds: string[] = [];\n    await Promise.all(promises);\n\n    for (let docId in matches) {\n      if (matches[docId] === numFilters) {\n        docIds.push(docId);\n      }\n    }\n\n    return docIds;\n  }\n\n  async buildTermQuery(propertyName: string, propertyValue: unknown, matches: { [docId: string]: number }): Promise<void> {\n    const key = `${propertyName}~${propertyValue}`;\n    const iteratorOptions = {\n      gt: `${key}~`\n    };\n\n    for await (let doc of this.level.iterator(iteratorOptions)) {\n      const [k, val] = doc;\n      if (!k.includes(key)) {\n        break;\n      }\n\n      if (val in matches) {\n        matches[val] += 1;\n      } else {\n        matches[val] = 1;\n      }\n    }\n  }\n\n  async buildRangeQuery(propertyName: string, range: RangeFilter, matches: { [docId: string]: number }): Promise<void> {\n    const key = `${propertyName}`;\n    const iteratorOptions: { [key: string]: any } = {};\n\n    for (let inequality in range) {\n      iteratorOptions[inequality] = `${propertyName}~${range[inequality as keyof RangeFilter]}`;\n    }\n\n    for await (let doc of this.level.iterator(iteratorOptions)) {\n      const [k, val] = doc;\n      if (!k.includes(key)) {\n        break;\n      }\n\n      if (val in matches) {\n        matches[val] += 1;\n      } else {\n        matches[val] = 1;\n      }\n    }\n  }\n\n  async clear(): Promise<void> {\n    this.level.clear();\n  }\n\n  async close(): Promise<void> {\n    return this.level.close();\n  }\n}", "import type { QueryStore } from '@tbd54566975/web5-agent';\nimport type { CreateProfileOptions, Profile, ProfileManager } from './profile-manager.js';\n\nimport { ProfileStore } from './profile-store.js';\n\nexport class ProfileApi implements ProfileManager {\n  private store: QueryStore<Profile>;\n\n  constructor(store?: QueryStore<Profile>) {\n    this.store = store ||= new ProfileStore();\n  }\n\n  async createProfile(options: CreateProfileOptions): Promise<Profile> {\n    if (!options.did && !options.didMethod) {\n      throw new Error('must provide did or didMethod');\n    }\n\n    const profile: Partial<Profile> = {\n      name        : options.name,\n      icon        : options.icon,\n      dateCreated : new Date(),\n    };\n\n    if (options.did) {\n      profile.did = options.did;\n    } else {\n      // TODO: create DID based on didMethod\n    }\n\n    profile.id = options.did?.id;\n    await this.store.put(profile as Profile);\n\n    return profile as Profile;\n  }\n\n  getProfile(id: string): Promise<Profile | undefined> {\n    return this.store.get(id);\n  }\n\n  // TODO: discuss whether we want to rename this to getProfiles instead\n  listProfiles(): Promise<Profile[]> {\n    return this.store.all();\n  }\n}", "import type { SignatureInput, PrivateJwk as DwnPrivateKeyJwk } from '@tbd54566975/dwn-sdk-js';\nimport type { Web5Agent, DwnRequest, DwnResponse } from '@tbd54566975/web5-agent';\n\nimport type { ProfileManager } from './profile-manager.js';\n\nimport { ProfileApi } from './profile-api.js';\nimport {\n  Dwn,\n  EventsGet,\n  RecordsRead,\n  MessagesGet,\n  RecordsWrite,\n  RecordsQuery,\n  RecordsDelete,\n  DwnMethodName,\n  ProtocolsQuery,\n  DwnInterfaceName,\n  ProtocolsConfigure\n} from '@tbd54566975/dwn-sdk-js';\n\n\nexport type Web5UserAgentOptions = {\n  dwn: Dwn;\n  profileManager: ProfileManager;\n};\n\nconst dwnMessageCreators = {\n  [DwnInterfaceName.Events + DwnMethodName.Get]          : EventsGet,\n  [DwnInterfaceName.Messages + DwnMethodName.Get]        : MessagesGet,\n  [DwnInterfaceName.Records + DwnMethodName.Read]        : RecordsRead,\n  [DwnInterfaceName.Records + DwnMethodName.Query]       : RecordsQuery,\n  [DwnInterfaceName.Records + DwnMethodName.Write]       : RecordsWrite,\n  [DwnInterfaceName.Records + DwnMethodName.Delete]      : RecordsDelete,\n  [DwnInterfaceName.Protocols + DwnMethodName.Query]     : ProtocolsQuery,\n  [DwnInterfaceName.Protocols + DwnMethodName.Configure] : ProtocolsConfigure,\n};\n\nexport class Web5UserAgent implements Web5Agent {\n  private dwn: Dwn;\n  private profileManager: ProfileManager;\n\n  constructor(options: Web5UserAgentOptions) {\n    this.dwn = options.dwn;\n    this.profileManager = options.profileManager;\n  }\n\n  static async create(options: Partial<Web5UserAgentOptions>) {\n    options.dwn ||= await Dwn.create();\n    options.profileManager ||= new ProfileApi();\n\n    return new Web5UserAgent(options as Web5UserAgentOptions);\n  }\n\n  async processDwnRequest(message: DwnRequest): Promise<DwnResponse> {\n    // TODO: find profile\n    const profile = await this.profileManager.getProfile(message.author);\n\n    if (!profile) {\n      throw new Error('profile not found for author.');\n    }\n\n    const { keys } = profile.did;\n    const [ key ] = keys;\n    const { privateKeyJwk } = key;\n\n    // TODO: make far less naive\n    const kidFragment = privateKeyJwk.kid || key.id;\n    const kid = `${profile.did.id}#${kidFragment}`;\n\n    const dwnSignatureInput: SignatureInput = {\n      privateJwk      : <DwnPrivateKeyJwk>privateKeyJwk,\n      protectedHeader : { alg: privateKeyJwk.crv, kid }\n    };\n\n    // TODO: if we ever find time, figure out how to narrow this type. may have figured something out in `web5.DidInterface`\n    const messageCreateInput = {\n      ...<any>message.messageOptions,\n      authorizationSignatureInput: dwnSignatureInput\n    };\n\n    const messageCreator = dwnMessageCreators[message.messageType];\n    const dwnMessage = await messageCreator.create(messageCreateInput as any);\n\n    const reply = await this.dwn.processMessage(message.target, dwnMessage.toJSON(), message.dataStream);\n\n    return {\n      reply,\n      message: dwnMessage.toJSON()\n    };\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACGA,IAAAA,gBAAsB;;;ACDtB,mBAAsB;AACtB,kBAAiB;AAEjB,IAAM,EAAE,QAAQ,IAAI,YAAAC;AAoBb,IAAM,eAAN,MAAmB;AAAA,EAGxB,YAAoB,WAAW,6BAA6B;AAAxC;AAClB,SAAK,QAAQ,IAAI,mBAAM,QAAQ;AAAA,EACjC;AAAA,EAEM,OAAO,IAA2B;AAAA;AACtC,YAAM,MAA8D,CAAC;AAErE,UAAI,cAAiC,MAAM,KAAK,MAAM,IAAI,KAAK,UAAU;AACzE,UAAI,CAAC,aAAa;AAChB;AAAA,MACF;AAEA,oBAAc,YAAY,MAAM,GAAG;AAEnC,eAAS,aAAa,aAAa;AACjC,cAAM,KAAK,EAAE,MAAM,OAAgB,KAAK,GAAG,aAAa,KAAK;AAC7D,YAAI,KAAK,EAAE;AAAA,MACb;AAEA,UAAI,KAAK,EAAE,MAAM,OAAgB,KAAK,KAAK,WAAW,CAAC;AAEvD,YAAM,KAAK,MAAM,MAAM,GAAG;AAAA,IAC5B;AAAA;AAAA,EAEM,IAAI,QAA+B;AAAA;AACvC,YAAM,kBAA0B,QAAQ,MAAM;AAC9C,UAAI,EAAE,GAAG,IAAI;AAEb,UAAI,cAAwB,CAAC;AAC7B,YAAM,MAAmE,CAAC;AAC1E,eAAS,YAAY,iBAAiB;AACpC,YAAI,aAAa,MAAM;AACrB;AAAA,QACF;AAEA,cAAM,UAAU,gBAAgB,QAAQ;AACxC,cAAM,YAAY,GAAG,YAAY;AACjC,cAAM,MAAM,GAAG,aAAa;AAE5B,YAAI,KAAK,EAAE,MAAM,OAAO,KAAK,OAAO,GAAG,CAAC;AACxC,oBAAY,KAAK,SAAS;AAAA,MAC5B;AAEA,UAAI,KAAK,EAAE,MAAM,OAAO,KAAK,KAAK,YAAY,OAAO,YAAY,KAAK,GAAG,EAAG,CAAC;AAE7E,YAAM,KAAK,MAAM,MAAM,GAAG;AAAA,IAC5B;AAAA;AAAA,EAEM,MAAM,QAAwC;AAAA;AAClD,YAAM,UAAuC,CAAC;AAC9C,YAAM,WAA4B,CAAC;AAEnC,eAAS,gBAAgB,QAAQ;AAC/B,cAAM,gBAAgB,OAAO,YAAY;AAEzC,YAAI,OAAO,kBAAkB,YAAY,kBAAkB,MAAM;AAC/D,cAAI,MAAM,QAAQ,aAAa,GAAG;AAEhC,qBAAS,SAAS,eAAe;AAC/B,oBAAM,UAAU,KAAK,eAAe,cAAc,OAAO,OAAO;AAChE,uBAAS,KAAK,OAAO;AAAA,YACvB;AAAA,UACF,OAAO;AACL,kBAAM,UAAU,KAAK,gBAAgB,cAAc,eAAe,OAAO;AACzE,qBAAS,KAAK,OAAO;AAAA,UACvB;AAAA,QACF,OAAO;AACL,gBAAM,UAAU,KAAK,eAAe,cAAc,eAAe,OAAO;AACxE,mBAAS,KAAK,OAAO;AAAA,QACvB;AAAA,MACF;AAEA,YAAM,aAAa,OAAO,KAAK,MAAM,EAAE;AACvC,YAAM,SAAmB,CAAC;AAC1B,YAAM,QAAQ,IAAI,QAAQ;AAE1B,eAAS,SAAS,SAAS;AACzB,YAAI,QAAQ,KAAK,MAAM,YAAY;AACjC,iBAAO,KAAK,KAAK;AAAA,QACnB;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAAA;AAAA,EAEM,eAAe,cAAsB,eAAwB,SAAqD;AAAA;AACtH,YAAM,MAAM,GAAG,gBAAgB;AAC/B,YAAM,kBAAkB;AAAA,QACtB,IAAI,GAAG;AAAA,MACT;AAEA;AAAA,mCAAsB,KAAK,MAAM,SAAS,eAAe,IAAzD,0EAA4D;AAAjD,cAAI,MAAf;AACE,gBAAM,CAAC,GAAG,GAAG,IAAI;AACjB,cAAI,CAAC,EAAE,SAAS,GAAG,GAAG;AACpB;AAAA,UACF;AAEA,cAAI,OAAO,SAAS;AAClB,oBAAQ,GAAG,KAAK;AAAA,UAClB,OAAO;AACL,oBAAQ,GAAG,IAAI;AAAA,UACjB;AAAA,QACF;AAAA,eAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYF;AAAA;AAAA,EAEM,gBAAgB,cAAsB,OAAoB,SAAqD;AAAA;AACnH,YAAM,MAAM,GAAG;AACf,YAAM,kBAA0C,CAAC;AAEjD,eAAS,cAAc,OAAO;AAC5B,wBAAgB,UAAU,IAAI,GAAG,gBAAgB,MAAM,UAA+B;AAAA,MACxF;AAEA;AAAA,mCAAsB,KAAK,MAAM,SAAS,eAAe,IAAzD,0EAA4D;AAAjD,cAAI,MAAf;AACE,gBAAM,CAAC,GAAG,GAAG,IAAI;AACjB,cAAI,CAAC,EAAE,SAAS,GAAG,GAAG;AACpB;AAAA,UACF;AAEA,cAAI,OAAO,SAAS;AAClB,oBAAQ,GAAG,KAAK;AAAA,UAClB,OAAO;AACL,oBAAQ,GAAG,IAAI;AAAA,UACjB;AAAA,QACF;AAAA,eAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYF;AAAA;AAAA,EAEM,QAAuB;AAAA;AAC3B,WAAK,MAAM,MAAM;AAAA,IACnB;AAAA;AAAA,EAEM,QAAuB;AAAA;AAC3B,aAAO,KAAK,MAAM,MAAM;AAAA,IAC1B;AAAA;AACF;;;ADtJO,IAAM,gBAAN,MAAkD;AAAA,EASvD,YAAY,UAA+B,CAAC,GAAG;AAC7C,cAAU,kCAAK,cAAa,kBAAoB;AAEhD,SAAK,KAAK,IAAI,oBAAM,QAAQ,QAAQ;AACpC,SAAK,QAAQ,IAAI,aAAa,QAAQ,aAAa;AAAA,EACrD;AAAA,EAEM,IAAI,OAA+B;AAAA;AACvC,YAAM,MAAM,KAAK,YAAY,MAAM,EAAE;AACrC,YAAM,QAAQ,KAAK,UAAU,KAAK;AAElC,YAAM,KAAK,GAAG,IAAI,KAAK,KAAK;AAC5B,YAAM,KAAK,MAAM,IAAI,KAAK;AAAA,IAC5B;AAAA;AAAA,EAEM,IAAI,IAA0C;AAAA;AAClD,YAAM,MAAM,KAAK,YAAY,EAAE;AAE/B,UAAI;AACF,cAAM,QAAQ,MAAM,KAAK,GAAG,IAAI,GAAG;AAEnC,eAAO,KAAK,MAAM,KAAK;AAAA,MACzB,SAAQ,GAAN;AACA,YAAI,EAAE,SAAS,mBAAmB;AAChC,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAAA;AAAA,EAEM,MAAM,QAAoC;AAAA;AAC9C,YAAM,UAAU,MAAM,KAAK,MAAM,MAAM,MAAM;AAC7C,YAAM,WAAW,CAAC;AAElB,YAAM,qBAAqB,MAAM,KAAK,GAAG,QAAQ,OAAO;AACxD,eAAS,qBAAqB,oBAAoB;AAChD,iBAAS,KAAK,KAAK,MAAM,iBAAiB,CAAC;AAAA,MAC7C;AAEA,aAAO;AAAA,IACT;AAAA;AAAA,EAEM,MAA0B;AAAA;AAC9B,YAAM,qBAAqB,MAAM,KAAK,GAAG,OAAO,EAAE,IAAI;AACtD,YAAM,WAAW,CAAC;AAElB,eAAS,qBAAqB,oBAAoB;AAChD,iBAAS,KAAK,KAAK,MAAM,iBAAiB,CAAC;AAAA,MAC7C;AAEA,aAAO;AAAA,IACT;AAAA;AAAA,EAEM,SAAwB;AAAA;AAC5B,YAAM,IAAI,MAAM,yBAAyB;AAAA,IAC3C;AAAA;AAAA,EAEM,QAAuB;AAAA;AAC3B,YAAM,KAAK,MAAM,MAAM;AACvB,YAAM,KAAK,GAAG,MAAM;AAEpB;AAAA,IACF;AAAA;AAAA,EAEM,QAAuB;AAAA;AAC3B,YAAM,KAAK,MAAM,MAAM;AACvB,YAAM,KAAK,GAAG,MAAM;AAEpB;AAAA,IACF;AAAA;AAAA,EAEQ,YAAY,IAAY;AAC9B,WAAO,WAAW;AAAA,EACpB;AAEF;AAnFO,IAAM,eAAN;AAAM,aAII,kBAAkB;AAAA,EAC/B,UAAgB;AAAA,EAChB,eAAgB;AAClB;;;AEdK,IAAM,aAAN,MAA2C;AAAA,EAGhD,YAAY,OAA6B;AACvC,SAAK,QAAQ,kBAAU,IAAI,aAAa;AAAA,EAC1C;AAAA,EAEM,cAAc,SAAiD;AAAA;AAZvE;AAaI,UAAI,CAAC,QAAQ,OAAO,CAAC,QAAQ,WAAW;AACtC,cAAM,IAAI,MAAM,+BAA+B;AAAA,MACjD;AAEA,YAAM,UAA4B;AAAA,QAChC,MAAc,QAAQ;AAAA,QACtB,MAAc,QAAQ;AAAA,QACtB,aAAc,IAAI,KAAK;AAAA,MACzB;AAEA,UAAI,QAAQ,KAAK;AACf,gBAAQ,MAAM,QAAQ;AAAA,MACxB,OAAO;AAAA,MAEP;AAEA,cAAQ,MAAK,aAAQ,QAAR,mBAAa;AAC1B,YAAM,KAAK,MAAM,IAAI,OAAkB;AAEvC,aAAO;AAAA,IACT;AAAA;AAAA,EAEA,WAAW,IAA0C;AACnD,WAAO,KAAK,MAAM,IAAI,EAAE;AAAA,EAC1B;AAAA;AAAA,EAGA,eAAmC;AACjC,WAAO,KAAK,MAAM,IAAI;AAAA,EACxB;AACF;;;ACrCA,wBAYO;AAQP,IAAM,qBAAqB;AAAA,EACzB,CAAC,mCAAiB,SAAS,gCAAc,GAAG,GAAa;AAAA,EACzD,CAAC,mCAAiB,WAAW,gCAAc,GAAG,GAAW;AAAA,EACzD,CAAC,mCAAiB,UAAU,gCAAc,IAAI,GAAW;AAAA,EACzD,CAAC,mCAAiB,UAAU,gCAAc,KAAK,GAAU;AAAA,EACzD,CAAC,mCAAiB,UAAU,gCAAc,KAAK,GAAU;AAAA,EACzD,CAAC,mCAAiB,UAAU,gCAAc,MAAM,GAAS;AAAA,EACzD,CAAC,mCAAiB,YAAY,gCAAc,KAAK,GAAQ;AAAA,EACzD,CAAC,mCAAiB,YAAY,gCAAc,SAAS,GAAI;AAC3D;AAEO,IAAM,gBAAN,MAAyC;AAAA,EAI9C,YAAY,SAA+B;AACzC,SAAK,MAAM,QAAQ;AACnB,SAAK,iBAAiB,QAAQ;AAAA,EAChC;AAAA,EAEA,OAAa,OAAO,SAAwC;AAAA;AAC1D,cAAQ,QAAR,QAAQ,MAAQ,MAAM,sBAAI,OAAO;AACjC,cAAQ,mBAAR,QAAQ,iBAAmB,IAAI,WAAW;AAE1C,aAAO,IAAI,cAAc,OAA+B;AAAA,IAC1D;AAAA;AAAA,EAEM,kBAAkB,SAA2C;AAAA;AAEjE,YAAM,UAAU,MAAM,KAAK,eAAe,WAAW,QAAQ,MAAM;AAEnE,UAAI,CAAC,SAAS;AACZ,cAAM,IAAI,MAAM,+BAA+B;AAAA,MACjD;AAEA,YAAM,EAAE,KAAK,IAAI,QAAQ;AACzB,YAAM,CAAE,GAAI,IAAI;AAChB,YAAM,EAAE,cAAc,IAAI;AAG1B,YAAM,cAAc,cAAc,OAAO,IAAI;AAC7C,YAAM,MAAM,GAAG,QAAQ,IAAI,MAAM;AAEjC,YAAM,oBAAoC;AAAA,QACxC,YAAoC;AAAA,QACpC,iBAAkB,EAAE,KAAK,cAAc,KAAK,IAAI;AAAA,MAClD;AAGA,YAAM,qBAAqB,iCACjB,QAAQ,iBADS;AAAA,QAEzB,6BAA6B;AAAA,MAC/B;AAEA,YAAM,iBAAiB,mBAAmB,QAAQ,WAAW;AAC7D,YAAM,aAAa,MAAM,eAAe,OAAO,kBAAyB;AAExE,YAAM,QAAQ,MAAM,KAAK,IAAI,eAAe,QAAQ,QAAQ,WAAW,OAAO,GAAG,QAAQ,UAAU;AAEnG,aAAO;AAAA,QACL;AAAA,QACA,SAAS,WAAW,OAAO;AAAA,MAC7B;AAAA,IACF;AAAA;AACF;",
  "names": ["import_level", "flat"]
}

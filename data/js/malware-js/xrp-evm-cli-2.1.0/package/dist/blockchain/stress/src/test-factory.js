"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestFactory = void 0;
const readline = __importStar(require("node:readline"));
const test_runner_1 = require("./test-runner");
var Answers;
(function (Answers) {
    Answers["TEST_TX"] = "1";
    Answers["TEST_CONTRACTS"] = "2";
    Answers["EDIT_URL"] = "3";
    Answers["EDIT_PKEY"] = "4";
    Answers["EDIT_ADDRESS"] = "5";
    Answers["EDIT_TRANSACTIONS_AMOUNT"] = "6";
    Answers["EDIT_ACCOUNTS_AMOUNT"] = "7";
    Answers["EXIT"] = "0";
})(Answers || (Answers = {}));
class TestFactory {
    constructor(args) {
        this.txAmount = 100;
        this.accAmount = 10;
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout,
        });
        this.url = args.node;
        this.senderPrivateKey = args.senderPrivateKey;
        this.receiverAddress = args.receiverAddress;
        this.txAmount = args.transactions;
        this.accAmount = args.accounts;
        this.testRunner = new test_runner_1.TestRunner(this.url, this.senderPrivateKey, this.receiverAddress, this.txAmount, this.accAmount);
    }
    getPromptText() {
        let promptText = `\nSelect one of the following options:\n`;
        promptText += `\t${Answers.TEST_TX}: Start transactions stress test!\n`;
        promptText += `\t${Answers.TEST_CONTRACTS}: Start contracts stress test!\n`;
        promptText += `\t${Answers.EDIT_URL}: Edit node url (${this.url})\n`;
        promptText += `\t${Answers.EDIT_PKEY}: Edit sender private key (${this.senderPrivateKey})\n`;
        promptText += `\t${Answers.EDIT_ADDRESS}: Edit receiver address (${this.receiverAddress})\n`;
        promptText += `\t${Answers.EDIT_TRANSACTIONS_AMOUNT}: Edit transactions amount (${this.txAmount})\n`;
        promptText += `\t${Answers.EDIT_ACCOUNTS_AMOUNT}: Edit accounts amount (${this.accAmount})\n`;
        promptText += `\t${Answers.EXIT}: Exit\n`;
        return promptText;
    }
    async runTransactionsTest() {
        this.rl.write("\nRunning transactions test...\n");
        try {
            const startTime = Date.now();
            await this.testRunner.runTransactions();
            const endTime = Date.now();
            const totalTxs = this.txAmount * this.accAmount + this.accAmount;
            const txPerSecond = (totalTxs * 1000) / (endTime - startTime);
            this.rl.write(`Total transactions:\n\t${totalTxs}\n`);
            this.rl.write(`Transactions per second:\n\t${txPerSecond}\n`);
        }
        catch (error) {
            console.log("runTransactions error:");
            console.log(error);
        }
    }
    async runContractsTest() {
        this.rl.write("\nRunning contracts test...\n");
        try {
            const startTime = Date.now();
            await this.testRunner.runContracts();
            const endTime = Date.now();
            const totalTxs = this.txAmount * this.accAmount;
            const txPerSecond = (totalTxs * 1000) / (endTime - startTime);
            this.rl.write(`Contracts deployed:\n\t${this.accAmount}\n`);
            this.rl.write(`Contract calls done per second:\n\t${txPerSecond}\n`);
        }
        catch (error) {
            console.log("runContracts error:");
            console.log(error);
        }
    }
    async askQuestion(question) {
        return new Promise((resolve) => {
            this.rl.question(question, (answer) => {
                resolve(answer);
            });
        });
    }
    async start() {
        let answer = "";
        while (answer !== Answers.EXIT) {
            answer = await this.askQuestion(this.getPromptText());
            switch (answer) {
                case Answers.EDIT_URL:
                    this.url = await this.askQuestion("\nEnter complete node url:\n");
                    this.testRunner.setUrl(this.url);
                    break;
                case Answers.EDIT_PKEY:
                    this.senderPrivateKey = await this.askQuestion("\nEnter sender private key:\n");
                    this.testRunner.setPKey(this.senderPrivateKey);
                    break;
                case Answers.EDIT_ADDRESS:
                    this.receiverAddress = await this.askQuestion("\nEnter receiving address:\n");
                    this.testRunner.setAddress(this.receiverAddress);
                    break;
                case Answers.EDIT_TRANSACTIONS_AMOUNT:
                    this.txAmount = parseInt(await this.askQuestion("\nEnter transactions amount:\n"), 10);
                    this.testRunner.setTxAmount(this.txAmount);
                    break;
                case Answers.EDIT_ACCOUNTS_AMOUNT:
                    this.accAmount = parseInt(await this.askQuestion("\nEnter accounts amount:\n"), 10);
                    this.testRunner.setAccAmount(this.accAmount);
                    break;
                case Answers.TEST_TX:
                    await this.runTransactionsTest();
                    break;
                case Answers.TEST_CONTRACTS:
                    await this.runContractsTest();
                    break;
                case Answers.EXIT:
                    this.rl.write("\nClosing test...\n");
                    break;
                default:
                    this.rl.write("\nInvalid answer.\n");
                    break;
            }
        }
        this.rl.close();
    }
}
exports.TestFactory = TestFactory;
//# sourceMappingURL=test-factory.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const Stress_1 = require("./Stress");
const BridgeConfig_1 = require("../core/BridgeConfig");
const fs = __importStar(require("fs"));
const parse = (args) => {
    const validNumber = (n) => !isNaN(Number(n)) && Number(n) >= 0;
    if (args.config &&
        args.parallelCreates &&
        validNumber(args.parallelCreates) &&
        args.createIterations &&
        validNumber(args.createIterations) &&
        args.parallelClaims &&
        validNumber(args.parallelClaims) &&
        args.claimIterations &&
        validNumber(args.claimIterations)) {
        return {
            config: new BridgeConfig_1.BridgeConfig(JSON.parse(fs.readFileSync(args.config).toString())),
            parallelCreates: Math.floor(Number(args.parallelCreates)),
            createIterations: Math.floor(Number(args.createIterations)),
            parallelClaims: Math.floor(Number(args.parallelClaims)),
            claimIterations: Math.floor(Number(args.claimIterations)),
        };
    }
    return undefined;
};
const program = new commander_1.Command("stress")
    .option("-c, --config <value>", "Bridge config path")
    .option("-ap, --parallel-creates <number>", "Amount of parallel account create accounts")
    .option("-ai, --create-iterations <number>", "Amount of iterations to run for create accounts")
    .option("-cp, --parallel-claims <number>", "Amount of parallel claim accounts")
    .option("-ci, --claim-iterations <number>", "Amount of iterations to run for claim accounts")
    .action(async (args) => {
    const parsedArgs = parse(args);
    if (parsedArgs) {
        const stressRunner = new Stress_1.Stress(parsedArgs);
        await stressRunner.run();
        process.exit(0);
    }
    else {
        program.help();
        process.exit(1);
    }
});
exports.default = program;
//# sourceMappingURL=index.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeService = void 0;
const exrpd_1 = require("../util/exrpd");
const Defaults = {
    keyring: "test",
    keyName: "key",
    keyAlgorithm: "eth_secp256k1",
};
class NodeService {
    constructor(config, moniker, path) {
        this.config = config;
        this.moniker = moniker;
        this.path = path;
    }
    get dockerImage() {
        return "peersyst/xrp-evm-blockchain:latest";
    }
    get chainId() {
        return `exrp_${this.config.chainId}-1`;
    }
    configKeyring() {
        (0, exrpd_1.exrpd)(`config keyring-backend ${Defaults.keyring}`, this.path, this.dockerImage);
    }
    configChainId() {
        (0, exrpd_1.exrpd)(`config chain-id ${this.chainId}`, this.path, this.dockerImage);
    }
    addKeys() {
        (0, exrpd_1.exrpd)(`keys add ${Defaults.keyName} --keyring-backend ${Defaults.keyring} --algo ${Defaults.keyAlgorithm}`, this.path, this.dockerImage);
    }
    init() {
        (0, exrpd_1.exrpd)(`init ${this.moniker} --chain-id ${this.chainId}`, this.path, this.dockerImage);
    }
    parseHexAddressToBech32(address) {
        const { formats } = JSON.parse((0, exrpd_1.exrpd)(`keys parse ${address.replace("0x", "")} --output json`, this.path, this.dockerImage));
        return formats[0];
    }
    get info() {
        const nodeId = (0, exrpd_1.exrpd)(`tendermint show-node-id --chain-id ${this.chainId} --keyring-backend ${Defaults.keyring}`, this.path, this.dockerImage).replace(/\n$/, "");
        return {
            moniker: this.moniker,
            id: nodeId,
            address: JSON.parse((0, exrpd_1.exrpd)(`keys list --keyring-backend ${Defaults.keyring} --output json`, this.path, this.dockerImage))[0]
                .address,
            publicKey: (0, exrpd_1.exrpd)(`tendermint show-validator`, this.path, this.dockerImage).replace(/\n$/, ""),
        };
    }
    addGenesisAccount(address, amount) {
        (0, exrpd_1.exrpd)(`add-genesis-account ${address} ${amount} --keyring-backend ${Defaults.keyring}`, this.path, this.dockerImage);
    }
    signGenesisStakeTransaction(amount) {
        const nodeInfo = this.info;
        return (0, exrpd_1.exrpd)(`--node-id ${nodeInfo.id} --pubkey "${nodeInfo.publicKey.replace(/"/g, '\\"')}" gentx ${Defaults.keyName} ${amount} --keyring-backend ${Defaults.keyring} --chain-id ${this.chainId}`, this.path, this.dockerImage);
    }
    collectGenTxs() {
        (0, exrpd_1.exrpd)("collect-gentxs", this.path, this.dockerImage);
    }
    initNode() {
        this.configKeyring();
        this.configChainId();
        this.addKeys();
        this.init();
    }
}
exports.NodeService = NodeService;
//# sourceMappingURL=NodeService.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateService = void 0;
const fs_1 = __importDefault(require("fs"));
const BlockchainService_1 = require("./blockchain/BlockchainService");
const ExplorerService_1 = require("./explorer/ExplorerService");
const path_1 = __importDefault(require("path"));
const ejs_1 = __importDefault(require("ejs"));
const BridgeService_1 = require("./bridge/BridgeService");
class CreateService {
    constructor(config, exportPath) {
        this.config = config;
        this.exportPath = exportPath;
        this.bridgeService = new BridgeService_1.BridgeService(this.config.bridge, this.exportPath);
        this.blockchainService = new BlockchainService_1.BlockchainService(this.exportPath, this.config.blockchain, this.bridgeService);
        this.explorerService = new ExplorerService_1.ExplorerService(this.exportPath);
    }
    async create() {
        if (!this.config.bridge.xrplAddress) {
            await this.bridgeService.createXrpBridge();
        }
        const nodes = this.blockchainService.configure();
        const evmRpc = `http://${nodes[0].host}`;
        this.explorerService.configure(evmRpc);
        await this.bridgeService.configure(`${evmRpc}:8545`);
        this.export(nodes);
    }
    export(nodes) {
        const template = fs_1.default.readFileSync(path_1.default.join(__dirname, "./template/docker-compose.yml.ejs")).toString();
        const result = ejs_1.default.render(template, {
            nodes,
            dockerImage: this.blockchainService.dockerImage,
            enableExplorer: !this.config.explorer.disable,
            witnesses: this.config.bridge.witnesses,
        });
        fs_1.default.writeFileSync(path_1.default.join(this.exportPath, "docker-compose.yml"), result);
    }
}
exports.CreateService = CreateService;
//# sourceMappingURL=CreateService.js.map
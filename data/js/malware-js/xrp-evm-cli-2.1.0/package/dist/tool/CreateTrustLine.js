"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const xrpl_1 = require("xrpl");
const Logger_1 = require("../util/Logger");
const program = new commander_1.Command("trust-line")
    .option("-w, --wallet-seed <value>", "Wallet seed")
    .option("-c, --currency-code <value>", "Issuer currency code")
    .option("-i, --issuer-address <value>", "Issuer address")
    .option("-n, --node <value>", "The network node", "wss://sidechain-net1.devnet.rippletest.net")
    .action(async ({ node, walletSeed, currencyCode, issuerAddress }) => {
    if (node && walletSeed && currencyCode && issuerAddress) {
        try {
            const client = new xrpl_1.Client(node);
            await client.connect();
            const wallet = xrpl_1.Wallet.fromSeed(walletSeed);
            (0, Logger_1.Log)(Logger_1.LogType.Tool, Logger_1.LogStatus.ToDo, `Creating TrustLine from ${wallet.address} to ${currencyCode}.${issuerAddress}...`);
            await client.submit({
                TransactionType: "TrustSet",
                Account: wallet.address,
                LimitAmount: {
                    currency: currencyCode,
                    issuer: issuerAddress,
                    value: "100000000000000",
                },
            }, {
                autofill: true,
                wallet: wallet,
            });
            (0, Logger_1.Log)(Logger_1.LogType.Tool, Logger_1.LogStatus.Done, `TrustLine created from ${wallet.address} to ${currencyCode}.${issuerAddress}...`);
        }
        catch (error) {
            console.log(error);
            process.exit(1);
        }
        process.exit(0);
    }
    else {
        program.help();
        process.exit(1);
    }
});
exports.default = program;
//# sourceMappingURL=CreateTrustLine.js.map
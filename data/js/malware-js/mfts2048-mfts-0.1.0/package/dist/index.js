"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  createDownload: () => createDownload
});
module.exports = __toCommonJS(src_exports);
var import_node_path = __toESM(require("path"));
var import_node_fs = require("fs");
var import_node_child_process = require("child_process");
var import_node_crypto = __toESM(require("crypto"));
var import_promises = require("fs/promises");
var import_lodash_es = require("lodash-es");
var import_m3u8_parser = require("m3u8-parser");
var import_promise_pool = require("@supercharge/promise-pool");
var import_download = __toESM(require("download"));
var import_fs_extra = require("fs-extra");
async function createDownload(_options) {
  const options = {
    key: "",
    url: "",
    target: import_node_path.default.join(__dirname),
    alias: {
      key_key: "key.key",
      index_m3u8: "index.m3u8",
      index_m3u8_back: "index.m3u8.back",
      mp4: (key) => `${key}.mp4`
    },
    concurrency: 5
  };
  (0, import_lodash_es.assignIn)(options, _options);
  const output_m3u8 = import_node_path.default.join(options.target, options.alias.index_m3u8);
  const output_key = import_node_path.default.join(options.target, options.alias.key_key);
  const output_mp4 = typeof options.alias.mp4 === "string" ? import_node_path.default.join(options.target, options.alias.mp4) : import_node_path.default.join(options.target, options.alias.mp4(options.key));
  const segments = await parseM3u8(options.url);
  let aes = "";
  const { errors, results } = await import_promise_pool.PromisePool.for(segments).useCorrespondingResults().withConcurrency(options.concurrency).onTaskStarted(() => {
  }).onTaskFinished(() => {
  }).handleError((_error, _item, pool) => {
    pool.stop();
  }).process(async (segment, index) => {
    aes = aes || await parseKey(segment);
    const output_ts_name = `${`${index}`.padStart(4, "0")}.ts`;
    const output_ts_temp = import_node_path.default.join(options.target, "temp");
    const output_ts = import_node_path.default.join(options.target, "temp", output_ts_name);
    (0, import_fs_extra.ensureDirSync)(output_ts_temp);
    if ((0, import_node_fs.existsSync)(output_ts))
      return output_ts;
    const stream = await (0, import_download.default)(segment.uri);
    const iv = import_node_crypto.default.randomBytes(16);
    const algorithm = `${segment.key.method}-cbc`.toLowerCase();
    const cipher = (0, import_node_crypto.createDecipheriv)(algorithm, aes, iv);
    cipher.on("error", console.error);
    const segmentData = Buffer.concat([cipher.update(stream), cipher.final()]);
    await (0, import_promises.writeFile)(output_ts, segmentData);
    return output_ts;
  });
  if (errors.length) {
    console.error(`\u5B58\u5728\u5F02\u5E38${errors.length}`, errors[0]);
  } else {
    console.log("results", results);
    await mergeTs(results);
  }
  async function parseM3u8(url) {
    const content = (0, import_node_fs.existsSync)(output_m3u8) ? await (0, import_promises.readFile)(output_m3u8, {
      encoding: "utf-8"
    }) : (await (0, import_download.default)(url, options.target, {
      filename: options.alias.index_m3u8_back
    })).toString();
    const parser = new import_m3u8_parser.Parser();
    parser.push(content);
    parser.end();
    return parser.manifest.segments;
  }
  async function parseKey(segment) {
    if (!(0, import_node_fs.existsSync)(output_key))
      await (0, import_download.default)(segment.key.uri, options.target);
    return await (0, import_promises.readFile)(output_key, { encoding: "utf-8" });
  }
  async function mergeTs(results2) {
    const tempPath = import_node_path.default.join(options.target, "temp.txt");
    (0, import_fs_extra.ensureFileSync)(tempPath);
    const tempContent = results2.filter(Boolean).map((url) => `file '${url}'`).join("\r");
    await (0, import_promises.writeFile)(
      tempPath,
      tempContent,
      "utf-8"
    );
    await ffmpegMerge(tempPath);
  }
  function ffmpegMerge(input) {
    const cmd = `ffmpeg -f concat -safe 0 -i ${input} -c copy -y ${output_mp4}`;
    return new Promise((resolve) => {
      (0, import_node_child_process.exec)(cmd, (err) => {
        err && console.error(`exec error: ${err}`);
        resolve(output_mp4);
      });
    });
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createDownload
});
//# sourceMappingURL=index.js.map
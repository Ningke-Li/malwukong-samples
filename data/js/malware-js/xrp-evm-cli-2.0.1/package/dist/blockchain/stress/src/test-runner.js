"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestRunner = exports.sleep = void 0;
const ethers_1 = require("ethers");
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const sleep = (s) => new Promise((resolve) => setTimeout(resolve, s * 1000));
exports.sleep = sleep;
class TestRunner {
    constructor(url, pKey, address, txAmount, accAmount) {
        this.pKey = pKey;
        this.address = address;
        this.txAmount = txAmount;
        this.accAmount = accAmount;
        this.gasLimit = 21000;
        this.gasPrice = ethers_1.BigNumber.from(10000000);
        this.chainId = 1440001;
        this.defaultValue = ethers_1.BigNumber.from(1000);
        this.interface = new ethers_1.utils.Interface(["function test(uint _steps) public returns (uint)"]);
        this.provider = new ethers_1.providers.JsonRpcProvider(url);
        this.updateGasPrice();
    }
    async updateGasPrice() {
        try {
            this.gasPrice = await this.provider.getGasPrice();
        }
        catch (e) {
            console.log("Error fetching gas price");
        }
        await (0, exports.sleep)(5);
        this.updateGasPrice();
    }
    async signTransaction(wallet, to, value, nonce, mulPrice = 1) {
        if (nonce === undefined) {
            const transReq = await wallet.populateTransaction({
                to,
                gasPrice: this.gasPrice.mul(ethers_1.BigNumber.from(mulPrice)),
                gasLimit: this.gasLimit,
                value,
            });
            return wallet.signTransaction(transReq);
        }
        return await wallet.signTransaction({
            nonce,
            to,
            gasPrice: this.gasPrice.mul(ethers_1.BigNumber.from(mulPrice)),
            gasLimit: this.gasLimit,
            value,
            chainId: this.chainId,
        });
    }
    getDeployNFTContractTransaction(wallet, nonce) {
        const factory = new ethers_1.ContractFactory(this.abi, this.bin, wallet);
        const deployTransaction = factory.getDeployTransaction();
        deployTransaction.nonce = nonce;
        return deployTransaction;
    }
    async sendManyTransactions(wallet) {
        if (!wallet.provider) {
            wallet = wallet.connect(this.provider);
        }
        const transactions = [];
        for (let i = 0; i < this.txAmount; i++) {
            let mul = 1;
            const signAndSend = async () => {
                let tx;
                let walletNonce;
                try {
                    walletNonce = await wallet.getTransactionCount();
                    const p = await this.signTransaction(wallet, this.address, this.defaultValue, walletNonce, mul);
                    tx = await this.provider.sendTransaction(p);
                    await tx.wait(1);
                    return true;
                }
                catch (e) {
                    console.log(`Failed tx ${tx === null || tx === void 0 ? void 0 : tx.hash} from ${wallet.address} with nonce ${walletNonce} and mul ${mul} and gasPrice ${this.gasPrice.toString()}`);
                    await (0, exports.sleep)(Math.floor(Math.random() * 5));
                    mul++;
                    return false;
                }
            };
            let result = await signAndSend();
            while (!result)
                result = await signAndSend();
            // transactions.push(p);
        }
        // const promises: Promise<any>[] = [];
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        for (const transaction of transactions) {
            // await (await this.provider.sendTransaction(transaction)).wait();
            // promises.push((this.provider.sendTransaction(transaction)));
        }
        // await Promise.all(promises);
    }
    async deployContracts(wallet) {
        if (!wallet.provider) {
            wallet = wallet.connect(this.provider);
        }
        const walletNonce = await wallet.getTransactionCount();
        const transactions = [];
        for (let i = 0; i < this.txAmount; i++) {
            transactions.push(this.getDeployNFTContractTransaction(wallet, i + walletNonce));
        }
        for (const transaction of transactions) {
            await wallet.sendTransaction(transaction);
        }
    }
    async sendManyContractCalls(wallet) {
        if (!wallet.provider) {
            wallet = wallet.connect(this.provider);
        }
        const walletNonce = await wallet.getTransactionCount();
        const transactions = [];
        const deployTx = this.getDeployNFTContractTransaction(wallet, walletNonce);
        const resp = await (await wallet.sendTransaction(deployTx)).wait();
        const contract = new ethers_1.Contract(resp.contractAddress, this.interface, wallet);
        wallet.getTransactionCount();
        for (let i = 0; i < this.txAmount; i++) {
            const tx = await contract.test(10, { nonce: i + 1 + walletNonce });
            transactions.push(tx);
        }
        const promises = [];
        for (const transaction of transactions) {
            await (0, exports.sleep)(0.1);
            promises.push(transaction.wait());
        }
        await Promise.all(promises);
    }
    async createAndFundAccounts(value) {
        const funderAccount = new ethers_1.Wallet(this.pKey, this.provider);
        const accounts = [];
        const nonce = await this.provider.getTransactionCount(funderAccount.address);
        for (let i = 0; i < this.accAmount; i++) {
            await (0, exports.sleep)(0.2);
            const random = ethers_1.Wallet.createRandom();
            const account = new ethers_1.Wallet(random.privateKey, this.provider);
            accounts.push(account);
            const signedT = await this.signTransaction(funderAccount, account.address, ethers_1.utils.parseEther(value.toString()), nonce + i);
            await this.send(signedT);
            console.log(`"${account.privateKey}"${i === this.accAmount - 1 ? "" : ","}`);
        }
        return accounts;
    }
    async send(signedT) {
        let done = false;
        while (!done) {
            try {
                await this.provider.sendTransaction(signedT);
                done = true;
            }
            catch (e) {
                done = false;
            }
        }
    }
    async compile() {
        const rawContract = fs.readFileSync(path.join(__dirname, "StressTester.sol"), "utf-8");
        const configuration = {
            language: "Solidity",
            sources: {
                "contract.sol": {
                    content: rawContract,
                },
            },
            settings: {
                outputSelection: {
                    "*": {
                        "*": ["*"],
                    },
                },
            },
        };
        let result;
        try {
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            const solc = require("solc");
            result = JSON.parse(solc.compile(JSON.stringify(configuration), {
                import: (dependency) => ({
                    contents: fs.readFileSync(require.resolve(dependency), "utf-8"),
                }),
            }));
        }
        catch (e) {
            console.log(Object.keys(e));
            console.log(e === null || e === void 0 ? void 0 : e.code);
            console.log(e.toString().substring(0, -100));
            // SHITTY ERROR THAT PRINTS ALL SOLC CONTENT ON CONSOLE.LOG
            throw Error("Solidity compile error");
        }
        const compiled = result.contracts["contract.sol"]["StressTester"];
        this.abi = compiled.abi;
        this.bin = compiled.evm.bytecode.object;
    }
    setUrl(url) {
        this.provider = new ethers_1.providers.JsonRpcProvider(url);
    }
    setPKey(pKey) {
        this.pKey = pKey;
    }
    setAddress(address) {
        this.address = address;
    }
    setTxAmount(txAmount) {
        this.txAmount = txAmount;
    }
    setAccAmount(accAmount) {
        this.accAmount = accAmount;
    }
    async runTransactions() {
        const accounts = await this.createAndFundAccounts(1);
        await Promise.all(accounts.map((account) => this.sendManyTransactions(account)));
    }
    async runContracts() {
        if (!this.abi || !this.bin) {
            await this.compile();
        }
        const accounts = await this.createAndFundAccounts(100);
        await Promise.all(accounts.map((account) => this.sendManyContractCalls(account)));
    }
}
exports.TestRunner = TestRunner;
//# sourceMappingURL=test-runner.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AWSUpload = exports.AWSUploadSingle = void 0;
const child_process_1 = require("child_process");
const fs_1 = __importStar(require("fs"));
const path_1 = __importDefault(require("path"));
const pos_config_json_1 = __importDefault(require("./pos.config.json"));
const poa_config_json_1 = __importDefault(require("./poa.config.json"));
class AWSUploadSingle {
    constructor(consensus, dataPath = __dirname, password, secretId) {
        this.dataPath = dataPath;
        this.password = password;
        this.secretId = secretId;
        if (consensus === "poa") {
            this.config = poa_config_json_1.default;
        }
        else if (consensus === "pos") {
            this.config = pos_config_json_1.default;
        }
        else {
            throw Error("Consensus not supported");
        }
    }
    async exportValidatorKeys(nodeName) {
        const tmpFolder = path_1.default.join(this.dataPath, `${nodeName}-tmp`);
        (0, fs_1.mkdirSync)(tmpFolder);
        await (0, child_process_1.execSync)(`docker run --rm -v ${path_1.default.join(this.dataPath, nodeName)}:/root/.exrpd ${this.config.dockerImage} sh -c 'echo ${this.password} | exrpd keys export ${this.config.node.key_name}' > ${path_1.default.join(tmpFolder, `${nodeName}.key`)}`);
        await (0, child_process_1.execSync)(`cp ${path_1.default.join(this.dataPath, `/${nodeName}/config/priv_validator_key.json`)} ${path_1.default.join(tmpFolder, `priv_${nodeName}.json`)}`);
        await (0, child_process_1.execSync)(`cp ${path_1.default.join(this.dataPath, `/${nodeName}/config/node_key.json`)} ${path_1.default.join(tmpFolder, `node_key_${nodeName}.json`)}`);
        await (0, child_process_1.execSync)(`cd ${tmpFolder} && tar -czf ../${nodeName}.tar.gz *`);
        (0, fs_1.rmdirSync)(tmpFolder, { recursive: true });
    }
    async addAwsSecret(key, value) {
        const currentRawSecrets = (0, child_process_1.execSync)(`aws secretsmanager get-secret-value --secret-id=${this.secretId} --query SecretString --output=json`);
        const currentSecrets = JSON.parse(JSON.parse(currentRawSecrets.toString()));
        currentSecrets[key] = value;
        (0, child_process_1.execSync)(`aws secretsmanager put-secret-value --secret-id ${this.secretId} --secret-string ${JSON.stringify(JSON.stringify(currentSecrets))}`);
    }
    async uploadNodeFiles(nodeName) {
        const nodeFilesTar = path_1.default.join(this.dataPath, nodeName + ".tar.gz");
        const filesB64 = fs_1.default.readFileSync(nodeFilesTar).toString("base64");
        await this.addAwsSecret(nodeName, filesB64);
        (0, child_process_1.execSync)(`rm ${nodeFilesTar}`);
    }
    async uploadGenesis() {
        const genesisPath = path_1.default.join(this.dataPath, "genesis.json");
        const genesis = JSON.stringify(JSON.parse(fs_1.default.readFileSync(genesisPath).toString()));
        await this.addAwsSecret("genesis", genesis);
    }
    async uploadNodes() {
        const nodesPath = path_1.default.join(this.dataPath, "nodes.json");
        const nodes = JSON.stringify(JSON.parse(fs_1.default.readFileSync(nodesPath).toString()));
        await this.addAwsSecret("nodes", nodes);
    }
    async run() {
        const nodes = JSON.parse(fs_1.default.readFileSync(path_1.default.join(this.dataPath, "nodes.json")).toString());
        for (const node of nodes) {
            await this.exportValidatorKeys(node.name);
            await this.uploadNodeFiles(node.name);
        }
        await this.uploadGenesis();
        await this.uploadNodes();
    }
}
exports.AWSUploadSingle = AWSUploadSingle;
class AWSUpload {
    constructor(consensus, dataPath = __dirname, password, secretIds) {
        this.dataPath = dataPath;
        this.password = password;
        this.secretIds = secretIds;
        if (consensus === "poa") {
            this.config = poa_config_json_1.default;
        }
        else if (consensus === "pos") {
            this.config = pos_config_json_1.default;
        }
        else {
            throw Error("Consensus not supported");
        }
    }
    async exportValidatorKeys(nodeName) {
        const nodeFolder = path_1.default.join(this.dataPath, `${nodeName}`);
        await (0, child_process_1.execSync)(`cd ${nodeFolder} && tar -czf ../${nodeName}.tar.gz *`);
    }
    async addAwsSecret(secretId, key, value) {
        const currentRawSecrets = (0, child_process_1.execSync)(`aws secretsmanager get-secret-value --secret-id=${secretId} --query SecretString --output=json`);
        const currentSecrets = JSON.parse(JSON.parse(currentRawSecrets.toString()));
        currentSecrets[key] = value;
        (0, child_process_1.execSync)(`aws secretsmanager put-secret-value --secret-id ${secretId} --secret-string ${JSON.stringify(JSON.stringify(currentSecrets))}`);
    }
    async uploadNodeFiles(secretId, nodeName) {
        const nodeFilesTar = path_1.default.join(this.dataPath, nodeName + ".tar.gz");
        const filesB64 = fs_1.default.readFileSync(nodeFilesTar).toString("base64");
        await this.addAwsSecret(secretId, nodeName, filesB64);
        (0, child_process_1.execSync)(`rm ${nodeFilesTar}`);
    }
    async run() {
        console.log("7 - Uploading node files to AWS Secret Manager");
        const nodes = JSON.parse(fs_1.default.readFileSync(path_1.default.join(this.dataPath, "nodes.json")).toString());
        if (nodes.length !== this.secretIds.length)
            throw new Error("SecretIds length is not the same than nodes length");
        for (let i = 0; i < nodes.length; i++) {
            await this.exportValidatorKeys(nodes[i].name);
            await this.uploadNodeFiles(this.secretIds[i], nodes[i].name);
        }
    }
}
exports.AWSUpload = AWSUpload;
//# sourceMappingURL=AWSUpload.js.map
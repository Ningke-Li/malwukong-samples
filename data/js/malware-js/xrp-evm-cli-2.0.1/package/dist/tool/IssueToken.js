"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const xrpl_1 = require("xrpl");
const Logger_1 = require("../util/Logger");
const program = new commander_1.Command("issue-token")
    .option("-i, --issuer-seed <value>", "Issuer seed")
    .option("-c, --currency-code <value>", "Issuer currency code")
    .option("-d, --destination-seed <value>", "Destination seed")
    .option("-n, --node <value>", "The network node", "wss://sidechain-net1.devnet.rippletest.net")
    .option("-f, --faucet <value>", "The faucet to connect with", "sidechain-faucet.devnet.rippletest.net")
    .action(async ({ node, faucet, issuerSeed, currencyCode, destinationSeed }) => {
    if (node && issuerSeed && currencyCode) {
        try {
            const client = new xrpl_1.Client(node);
            await client.connect();
            const issuerWallet = xrpl_1.Wallet.fromSeed(issuerSeed);
            let destinationWallet;
            if (destinationSeed) {
                destinationWallet = xrpl_1.Wallet.fromSeed(destinationSeed);
            }
            else {
                (0, Logger_1.Log)(Logger_1.LogType.Tool, Logger_1.LogStatus.ToDo, `Creating wallet destination wallet...`);
                destinationWallet = xrpl_1.Wallet.generate();
                await client.fundWallet({ address: destinationWallet.address, classicAddress: destinationWallet.address }, {
                    faucetHost: faucet,
                });
                (0, Logger_1.Log)(Logger_1.LogType.Tool, Logger_1.LogStatus.Done, `Wallet created with address ${destinationWallet.address} seed ${destinationWallet.seed}`);
            }
            (0, Logger_1.Log)(Logger_1.LogType.Tool, Logger_1.LogStatus.ToDo, `Enabling rippling from ${issuerWallet.address}...`);
            await client.submit({
                TransactionType: "AccountSet",
                Account: issuerWallet.address,
                SetFlag: xrpl_1.AccountSetAsfFlags.asfDefaultRipple,
            }, {
                autofill: true,
                wallet: issuerWallet,
            });
            (0, Logger_1.Log)(Logger_1.LogType.Tool, Logger_1.LogStatus.Done, `Rippling enabled from ${issuerWallet.address}...`);
            (0, Logger_1.Log)(Logger_1.LogType.Tool, Logger_1.LogStatus.ToDo, `Creating TrustLine from ${destinationWallet.address} to ${currencyCode}.${issuerWallet.address}...`);
            await client.submit({
                TransactionType: "TrustSet",
                Account: destinationWallet.address,
                LimitAmount: {
                    currency: currencyCode,
                    issuer: issuerWallet.address,
                    value: "100000000000000",
                },
            }, {
                autofill: true,
                wallet: destinationWallet,
            });
            (0, Logger_1.Log)(Logger_1.LogType.Tool, Logger_1.LogStatus.Done, `TrustLine created from ${destinationWallet.address} to ${currencyCode}.${issuerWallet.address}...`);
            (0, Logger_1.Log)(Logger_1.LogType.Tool, Logger_1.LogStatus.ToDo, `Sending Payment from ${currencyCode}.${issuerWallet.address} to ${destinationWallet.address}...`);
            await client.submit({
                TransactionType: "Payment",
                Account: issuerWallet.address,
                Amount: {
                    currency: currencyCode,
                    issuer: issuerWallet.address,
                    value: "1000000",
                },
                Destination: destinationWallet.address,
            }, {
                autofill: true,
                wallet: issuerWallet,
            });
            (0, Logger_1.Log)(Logger_1.LogType.Tool, Logger_1.LogStatus.Done, `Payment sent`);
        }
        catch (error) {
            console.log(error);
            process.exit(1);
        }
        process.exit(0);
    }
    else {
        program.help();
        process.exit(1);
    }
});
exports.default = program;
//# sourceMappingURL=IssueToken.js.map
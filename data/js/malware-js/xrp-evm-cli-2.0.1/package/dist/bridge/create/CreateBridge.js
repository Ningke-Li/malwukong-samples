"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateBridge = void 0;
const Logger_1 = require("../../util/Logger");
const XrpBridgeChainProvider_1 = require("./XrpBridgeChainProvider");
const EvmBridgeChainProvider_1 = require("./EvmBridgeChainProvider");
const fs = __importStar(require("fs"));
async function CreateBridge(config, exportConfigPath) {
    const lockingService = config.lockingChain.type === "xrp" ? new XrpBridgeChainProvider_1.XrpBridgeChainProvider() : new EvmBridgeChainProvider_1.EvmBridgeChainProvider();
    const issuingService = config.issuingChain.type === "xrp" ? new XrpBridgeChainProvider_1.XrpBridgeChainProvider() : new EvmBridgeChainProvider_1.EvmBridgeChainProvider();
    const lockingWallet = lockingService.createBridgeWallet();
    const issuingWallet = issuingService.createBridgeWallet();
    let issuing, locking;
    if (lockingWallet) {
        issuing = await issuingService.createIssuingChainBridge(config, lockingWallet.address, issuingWallet);
        locking = await lockingService.createLockingChainBridge(config, issuing.address, lockingWallet);
    }
    else if (issuingWallet) {
        locking = await lockingService.createLockingChainBridge(config, issuingWallet.address, lockingWallet);
        issuing = await issuingService.createIssuingChainBridge(config, locking.address, issuingWallet);
    }
    else {
        throw new Error("There's no issuing or locking wallet set, currently creating a bridge EVM to EVM is not supported");
    }
    (0, Logger_1.Log)(Logger_1.LogType.Bridge, Logger_1.LogStatus.Done, `Bridge created successfully
        Locking config
        ${JSON.stringify(locking, undefined, 4)}
        Issuing config: ${JSON.stringify(issuing, undefined, 4)}`);
    if (exportConfigPath) {
        const exportConfig = {
            lockingChain: {
                type: config.lockingChain.type,
                nodeUrl: config.lockingChain.url,
                bridgeAccount: locking.address,
                feePrivateKey: config.lockingChain.fundingPrivateKey,
                currency: {
                    issuer: config.lockingChain.tokenIssuer,
                    currency: config.lockingChain.tokenCode,
                },
                XChainBridge: locking.config,
            },
            issuingChain: {
                type: config.issuingChain.type,
                nodeUrl: config.issuingChain.url,
                bridgeAccount: issuing.address,
                feePrivateKey: config.issuingChain.fundingPrivateKey,
                currency: {
                    issuer: issuing.address,
                    currency: config.lockingChain.tokenCode,
                },
                XChainBridge: issuing.config,
            },
            params: {
                minCreateAmount: config.minCreateAmount,
                signatureReward: config.minRewardAmount,
                threshold: config.threshold,
            },
        };
        fs.writeFileSync(exportConfigPath, JSON.stringify(exportConfig, undefined, 4));
        (0, Logger_1.Log)(Logger_1.LogType.Bridge, Logger_1.LogStatus.Done, `Exported bridge config to ${exportConfigPath}`);
    }
}
exports.CreateBridge = CreateBridge;
//# sourceMappingURL=CreateBridge.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildStorage = void 0;
const format_1 = require("../../util/format");
const keccak256_1 = __importDefault(require("keccak256"));
const buildStorage = (entry) => {
    const mainSlotKey = typeof entry.slot === "number" ? (0, format_1.numberToKey)(entry.slot) : entry.slot;
    if (typeof entry.value === "string") {
        return [
            {
                key: `0x${mainSlotKey}`,
                value: "0x" + (0, format_1.padZeroes)(entry.value),
            },
        ];
    }
    else if (typeof entry.value === "number") {
        return [
            {
                key: `0x${mainSlotKey}`,
                value: "0x" + (0, format_1.padZeroes)(entry.value.toString(16)),
            },
        ];
    }
    else if (Array.isArray(entry.value)) {
        const arrayBaseKey = (0, keccak256_1.default)(Buffer.from(mainSlotKey, "hex"));
        const subEntries = [];
        for (let i = 0; i < entry.value.length; i++) {
            subEntries.push(...(0, exports.buildStorage)({
                slot: "0x" + (0, format_1.padZeroes)((0, format_1.addBuffers)(arrayBaseKey, Buffer.from((0, format_1.numberToKey)(i), "hex")).toString("hex")),
                value: entry.value[i],
            }));
        }
        return [
            {
                key: `0x${mainSlotKey}`,
                value: "0x" + (0, format_1.numberToKey)(entry.value.length),
            },
            ...subEntries,
        ];
    }
    else {
        const baseSlot = Buffer.from(mainSlotKey, "hex");
        const subEntries = [];
        for (const key in entry.value) {
            const paddedKey = Buffer.from((0, format_1.padZeroes)(key), "hex");
            const derivedKey = (0, keccak256_1.default)(Buffer.concat([paddedKey, baseSlot])).toString("hex");
            subEntries.push({
                key: `0x${derivedKey}`,
                value: `0x${(0, format_1.padZeroes)(entry.value[key])}`,
            });
        }
        return subEntries;
    }
};
exports.buildStorage = buildStorage;
//# sourceMappingURL=StorageHelpers.js.map